generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
}

enum AssetType {
  FIXED_ASSET
  UTENSIL
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
  DAMAGED
  OUT_OF_ORDER
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StaffDepartment {
  MAINTENANCE
  HOUSEKEEPING
  KITCHEN
  RECEPTION
  SECURITY
  MANAGEMENT
  ACCOUNTING
}

enum StaffClass {
  TECHNICIAN
  SUPERVISOR
  MANAGER
  ASSISTANT
  SPECIALIST
}

enum WakeUpCallStatus {
  Pending
  Completed
  Cancelled
}

enum Nationality {
  native
  foreigner
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  password           String
  name               String
  role               Role     @default(CASHIER)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Enhanced user fields for asset management
  department         StaffDepartment?
  staffClass         StaffClass?
  fullName           String?
  nic                String?  @unique // National Identity Card
  dateOfBirth        DateTime?
  contact            String?
  address            String?
  isDedicated        Boolean  @default(false) // Dedicated maintenance staff
  
  // Relations
  assetNotifications AssetNotification[]
  maintenanceLogs    MaintenanceLog[]
  assignedAssets     Asset[] // Assets assigned to this staff member
}

model Room_Facility_List {
  id        Int                          @id @default(autoincrement())
  name      String                       @unique
  details   Room_Facilities_Details_List[]
}

model Room_Facilities_Details_List {
  id              Int                @id @default(autoincrement())
  facilityType    String
  facility_type   Room_Facility_List @relation(fields: [facilityType], references: [name], onDelete: Cascade)
  facility_name   String  @unique
  description     String
  roomAssignments RoomFacilityAssignment[]
}

model Room_Size_List {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Customer {
  id             Int          @id @default(autoincrement())
  customerID     String       @unique
  isActive       Boolean      @default(true)
  title          String?
  firstName      String
  lastName       String?
  gender         String
  dateOfBirth    DateTime
  anniversary    DateTime?
  nationality    Nationality
  isVip          Boolean      @default(false)
  occupation     String?
  email          String       @unique
  countryCode    String?
  phone          String       
  contactType    String?
  country        String?
  state          String?
  city           String?
  zipcode        String?
  address        String
  identityType   String?
  identityNumber String       @unique
  frontIdUrl     String?
  backIdUrl      String?
  guestImageUrl  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reservations   Reservation[]
  wakeUpCalls    WakeUpCall[]
}

model WakeUpCall {
  id            Int       @id @default(autoincrement())
  customerId    Int
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerName  String
  customerPhone String
  date          DateTime
  time          String
  remarks       String?
  status        WakeUpCallStatus @default(Pending)
  createdAt     DateTime @default(now())
}

model ComplementaryItem {
  id            Int       @id @default(autoincrement())
  roomType      String
  complementary String
  rate          Int
  room_type     RoomList  @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
  reservations  Reservation[] @relation("ReservationToComplementary")
}

model Reservation {
  id                 Int       @id @default(autoincrement())
  bookingNumber      String    @unique
  checkInDate        DateTime
  checkOutDate       DateTime
  checkInTime        String
  checkOutTime       String
  arrivalFrom        String?
  bookingType        String?
  purposeOfVisit     String
  remarks            String?

  roomType           String
  roomTypeDetails    RoomList  @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
  roomNumber         Int
  room               Room      @relation(fields: [roomNumber], references: [roomNumber], onDelete: Cascade)

  adults             Int?
  children           Int?
  roomPrice          Int
  billingType        String

  complementaryItems ComplementaryItem[] @relation("ReservationToComplementary")
  customerId         Int
  customer           Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  discountReason     String?
  discountAmount     Int        @default(0)
  commissionPercent  Int        @default(0)
  commissionAmount   Int        @default(0)
  bookingCharge      Int        @default(0)
  tax                Int        @default(0)
  serviceCharge      Int        @default(0)
  paymentMode        String
  advanceRemarks     String?
  advanceAmount      Int        @default(0)
  total              Int        @default(0)
  balanceAmount      Int        @default(0)

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model BedType {
  id      Int        @id @default(autoincrement())
  name    String     @unique
  rooms   RoomList[] @relation("BedTypeToRoomList")
}

model BookingType {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  bookingSources  BookingSource[]
}

model BookingSource {
  id              Int          @id @default(autoincrement())
  bookingTypeId   Int
  bookingType     BookingType  @relation(fields: [bookingTypeId], references: [id], onDelete: Cascade)
  bookingSource   String
  commissionRate  Float @default(0.0)
  totalBalance    Float @default(0.0)
  paidAmount      Float @default(0.0)
  dueAmount       Float @default(0.0)
}

model RoomList {
  id                 Int      @id @default(autoincrement())
  roomType           String   @unique
  rate               Float
  bedCharge          Float
  hourlyCharge       Float
  personCharge       Float
  capacity           Int
  extraCapability    Boolean
  roomSize           String
  bedNo              Int
  bedTypeId          Int
  bedType            BedType   @relation("BedTypeToRoomList", fields: [bedTypeId], references: [id], onDelete: Cascade)
  roomDescription    String?
  reserveCondition   String?
  createdAt          DateTime  @default(now())

  roomImages         RoomImage[]
  promocodes         Promocode[]
  complementaryItems ComplementaryItem[]
  rooms              Room[]
  facilityAssignments RoomFacilityAssignment[]
  reservations       Reservation[]
  roomOffers         RoomOffer[] @relation("RoomOfferToRoomList")
}

model RoomFacilityAssignment {
  id         Int      @id @default(autoincrement())
  roomId     Int
  facilityId Int
  room       RoomList @relation(fields: [roomId], references: [id], onDelete: Cascade)
  facility   Room_Facilities_Details_List @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@unique([roomId, facilityId])
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  roomType  String
  imageUrl  String
  createdAt DateTime @default(now())
  room      RoomList @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
}

model Floor {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  floorLists FloorList[]
}

model FloorList {
  id           Int        @id @default(autoincrement())
  floorName    String
  floor        Floor      @relation(fields: [floorName], references: [name], onDelete: Cascade)
  noOfRoom     Int
  startRoomNo  Int
  createdAt    DateTime   @default(now())
  rooms        Room[]
}

model Room {
  id          Int        @id @default(autoincrement())
  roomNumber  Int        @unique
  floorListId Int
  floorList   FloorList  @relation(fields: [floorListId], references: [id], onDelete: Cascade)
  isAvailable Boolean    @default(true)
  roomType    String?
  roomList    RoomList?  @relation(fields: [roomType], references: [roomType], onDelete: SetNull)
  reservations Reservation[]
}

model Promocode {
  id         Int       @id @default(autoincrement())
  roomType   String
  room       RoomList  @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
  fromDate   DateTime
  toDate     DateTime
  discount   Int
  promocode  String    @unique
  status     String
  createdAt  DateTime  @default(now())
}

model RoomOffer {
  id           Int       @id @default(autoincrement())
  roomType     String
  room         RoomList  @relation("RoomOfferToRoomList", fields: [roomType], references: [roomType], onDelete: Cascade)
  date         DateTime
  originalRate Float
  offerDiscount Float?   // Stored as percentage (0-100)
  offerTitle   String?
  offerText    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([roomType, date])
}

// Asset Categories for better organization
model AssetCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique // "Furniture", "Electronics", "Kitchen Equipment", "Cleaning Tools"
  description String?
  assetType   AssetType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assets      Asset[]
}

// Enhanced Asset Model
model Asset {
  id                    Int       @id @default(autoincrement())
  assetId               String    @unique // Custom asset ID like "FURN-001", "UTIL-001"
  name                  String    // Asset name
  code                  String    @unique // Searchable code
  description           String?
  
  // Type and Category
  type                  AssetType
  categoryId            Int?
  category              AssetCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Purchase Information
  purchasePrice         Float
  purchaseDate          DateTime
  supplier              String?
  warrantyPeriod        Int?      // Warranty period in months
  warrantyExpiry        DateTime?
  
  // Physical Details
  quantity              Int       @default(1) // For utensils: 100 spoons, 200 plates
  unit                  String?   // "pieces", "sets", "kg"
  location              String?   // Where the asset is located
  serialNumber          String?
  model                 String?
  brand                 String?
  
  // Status and Condition
  status                AssetStatus @default(ACTIVE)
  condition             String?   // "Excellent", "Good", "Fair", "Poor"
  currentValue          Float?    // Depreciated value
  depreciationRate      Float?    // Annual depreciation percentage
  
  // Maintenance Information
  maintenanceDate       DateTime  // Next maintenance due date
  lastMaintenanceDate   DateTime?
  maintenanceInterval   Int       @default(365) // Days between maintenance
  maintenanceCost       Float     @default(0) // Annual maintenance cost estimate
  
  // Assignment
  assignedToId          Int?
  assignedTo            User?     @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  
  // Documentation
  imageUrl              String?
  documentUrl           String?   // Purchase receipt, manual, warranty
  qrCode                String?   // For easy mobile scanning
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  maintenanceLogs       MaintenanceLog[]
  notifications         AssetNotification[]
  transfers             AssetTransfer[]
  depreciations         AssetDepreciation[]
}

// Enhanced Maintenance Log Model
model MaintenanceLog {
  id                Int       @id @default(autoincrement())
  maintenanceId     String    @unique // Custom maintenance ID
  
  // Asset Information
  assetId           Int
  asset             Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Staff Information
  staffId           Int
  staff             User      @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  // Maintenance Details
  maintenanceDate   DateTime
  description       String    // What was done
  cost              Float     @default(0)
  
  // Service Information
  serviceProvider   String?   // Internal staff or external company
  serviceType       String?   // "Preventive", "Corrective", "Emergency"
  priority          MaintenancePriority @default(MEDIUM)
  
  // Status Tracking
  status            MaintenanceStatus @default(COMPLETED)
  scheduledDate     DateTime?
  startTime         DateTime?
  endTime           DateTime?
  
  // Next Maintenance
  nextMaintenanceDate DateTime?
  
  // Parts and Materials
  partsUsed         String?   // JSON string or comma-separated list
  partsCost         Float     @default(0)
  laborCost         Float     @default(0)
  
  // Quality Control
  inspectedBy       String?   // Who verified the maintenance
  qualityRating     Int?      // 1-5 rating
  
  // Documentation
  beforeImages      String?   // JSON array of image URLs
  afterImages       String?   // JSON array of image URLs
  workOrderNumber   String?
  
  // Additional Notes
  remarks           String?
  issuesFound       String?
  recommendations   String?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Enhanced Asset Notifications Model
model AssetNotification {
  id              Int       @id @default(autoincrement())
  notificationId  String    @unique // Custom notification ID
  
  // Asset and User
  assetId         Int
  asset           Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Notification Details
  type            String    // "MAINTENANCE_DUE", "MAINTENANCE_OVERDUE", "WARRANTY_EXPIRING", "ASSET_DAMAGED"
  title           String
  message         String
  priority        MaintenancePriority @default(MEDIUM)
  
  // Status
  isRead          Boolean   @default(false)
  isActionTaken   Boolean   @default(false)
  
  // Scheduling
  scheduledFor    DateTime
  sentAt          DateTime?
  acknowledgedAt  DateTime?
  
  // Auto-escalation
  escalationLevel Int       @default(0)
  escalatedTo     String?   // JSON array of user IDs to escalate to
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Asset Transfer/Movement Log
model AssetTransfer {
  id            Int      @id @default(autoincrement())
  transferId    String   @unique
  
  assetId       Int
  asset         Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  fromLocation  String
  toLocation    String
  fromUserId    Int?
  toUserId      Int?
  
  reason        String
  transferDate  DateTime
  approvedBy    String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Asset Depreciation Schedule
model AssetDepreciation {
  id              Int      @id @default(autoincrement())
  assetId         Int
  asset           Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  year            Int
  openingValue    Float
  depreciationAmount Float
  closingValue    Float
  method          String   // "STRAIGHT_LINE", "REDUCING_BALANCE"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([assetId, year])
}