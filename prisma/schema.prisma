generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CASHIER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room_Facility_List {
  id        Int                          @id @default(autoincrement())
  name      String                       @unique
  details   Room_Facilities_Details_List[]
}

model Room_Facilities_Details_List {
  id              Int                @id @default(autoincrement())
  facilityType    String
  facility_type   Room_Facility_List @relation(fields: [facilityType], references: [name], onDelete: Cascade)
  facility_name   String  @unique
  description     String
  roomAssignments RoomFacilityAssignment[]
}

model Room_Size_List {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Customer {
  id             Int          @id @default(autoincrement())
  title          String?
  firstName      String
  lastName       String?
  gender         String
  dateOfBirth    DateTime
  anniversary    DateTime?
  nationality    Nationality
  isVip          Boolean      @default(false)
  occupation     String?
  email          String       @unique
  countryCode    String
  phone          String       @unique
  contactType    String?
  country        String?
  state          String?
  city           String?
  zipcode        String?
  address        String
  identityType   String?
  identityNumber String       @unique
  frontIdUrl     String?
  backIdUrl      String?
  guestImageUrl  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reservations   Reservation[]
  wakeUpCalls    WakeUpCall[]
}

model WakeUpCall {
  id            Int       @id @default(autoincrement())
  customerId    Int
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerName  String
  customerPhone String
  date          DateTime
  time          String
  remarks       String?
  status        WakeUpCallStatus @default(Pending)
  createdAt     DateTime @default(now())
}

enum WakeUpCallStatus {
  Pending
  Completed
  Cancelled
}

enum Nationality {
  native
  foreigner
}

model ComplementaryItem {
  id            Int       @id @default(autoincrement())
  roomType      String
  complementary String
  rate          Int
  room_type     RoomList  @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
  reservations  Reservation[] @relation("ReservationToComplementary")
}

model Reservation {
  id                 Int       @id @default(autoincrement())
  bookingNumber      String    @unique
  checkInDate        DateTime
  checkOutDate       DateTime
  checkInTime        String
  checkOutTime       String
  arrivalFrom        String?
  bookingType        String?
  purposeOfVisit     String
  remarks            String?

  roomType           String
  roomTypeDetails    RoomList  @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
  roomNumber         Int
  room               Room      @relation(fields: [roomNumber], references: [roomNumber], onDelete: Cascade)

  adults             Int?
  children           Int?
  roomPrice          Int
  billingType        String

  complementaryItems ComplementaryItem[] @relation("ReservationToComplementary")
  customerId         Int
  customer           Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  discountReason     String?
  discountAmount     Int        @default(0)
  commissionPercent  Int        @default(0)
  commissionAmount   Int        @default(0)
  bookingCharge      Int        @default(0)
  tax                Int        @default(0)
  serviceCharge      Int        @default(0)
  paymentMode        String
  advanceRemarks     String?
  advanceAmount      Int        @default(0)
  total              Int        @default(0)
  balanceAmount      Int        @default(0)

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model BedType {
  id      Int        @id @default(autoincrement())
  name    String     @unique
  rooms   RoomList[] @relation("BedTypeToRoomList")
}

model BookingType {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  bookingSources  BookingSource[]
}

model BookingSource {
  id              Int          @id @default(autoincrement())
  bookingTypeId   Int
  bookingType     BookingType  @relation(fields: [bookingTypeId], references: [id], onDelete: Cascade)
  bookingSource   String
  commissionRate  Float @default(0.0)
  totalBalance    Float @default(0.0)
  paidAmount      Float @default(0.0)
  dueAmount       Float @default(0.0)
}

model RoomList {
  id                 Int      @id @default(autoincrement())
  roomType           String   @unique
  rate               Float
  bedCharge          Float
  hourlyCharge       Float
  personCharge       Float
  capacity           Int
  extraCapability    Boolean
  roomSize           String
  bedNo              Int
  bedTypeId          Int
  bedType            BedType   @relation("BedTypeToRoomList", fields: [bedTypeId], references: [id], onDelete: Cascade)
  roomDescription    String?
  reserveCondition   String?
  createdAt          DateTime  @default(now())

  roomImages         RoomImage[]
  promocodes         Promocode[]
  complementaryItems ComplementaryItem[]
  rooms              Room[]
  facilityAssignments RoomFacilityAssignment[]
  reservations       Reservation[]
}

model RoomFacilityAssignment {
  id         Int      @id @default(autoincrement())
  roomId     Int
  facilityId Int
  room       RoomList @relation(fields: [roomId], references: [id], onDelete: Cascade)
  facility   Room_Facilities_Details_List @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@unique([roomId, facilityId])
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  roomType  String
  imageUrl  String
  createdAt DateTime @default(now())
  room      RoomList @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
}

model Floor {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  floorLists FloorList[]
}

model FloorList {
  id           Int        @id @default(autoincrement())
  floorName    String
  floor        Floor      @relation(fields: [floorName], references: [name], onDelete: Cascade)
  noOfRoom     Int
  startRoomNo  Int
  createdAt    DateTime   @default(now())
  rooms        Room[]
}

model Room {
  id          Int        @id @default(autoincrement())
  roomNumber  Int        @unique
  floorListId Int
  floorList   FloorList  @relation(fields: [floorListId], references: [id], onDelete: Cascade)
  isAvailable Boolean    @default(true)
  roomType    String?
  roomList    RoomList?  @relation(fields: [roomType], references: [roomType], onDelete: SetNull)
  reservations Reservation[]
}

model Promocode {
  id         Int       @id @default(autoincrement())
  roomType   String
  room       RoomList  @relation(fields: [roomType], references: [roomType], onDelete: Cascade)
  fromDate   DateTime
  toDate     DateTime
  discount   Int
  promocode  String    @unique
  status     String
  createdAt  DateTime  @default(now())
}
