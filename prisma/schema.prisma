generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
  FRONT_OFFICE
}

enum AssetType {
  FIXED_ASSET
  UTENSIL
}

enum AssetStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
  DAMAGED
  OUT_OF_ORDER
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StaffDepartment {
  MAINTENANCE
  HOUSEKEEPING
  KITCHEN
  RECEPTION
  SECURITY
  MANAGEMENT
  ACCOUNTING
  FRONT_OFFICE
}

enum StaffClass {
  TECHNICIAN
  SUPERVISOR
  MANAGER
  ASSISTANT
  SPECIALIST
  RECEPTIONIST
}

// HR Module Enums
enum SalaryType {
  HOURLY
  DAILY
  MONTHLY
}

enum LeaveType {
  SICK
  CASUAL
  ANNUAL
  MATERNITY
  PATERNITY
  EMERGENCY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  LEAVE
}

enum PrivilegeType {
  ADD_USERS
  RESTAURANT_ORDERS
  INVENTORY
  ROOM_SETTING
  ACCOUNTS
  GENERAL_LEDGER
  UNIT_PRICING
}

enum WakeUpCallStatus {
  Pending
  Completed
  Cancelled
}

enum Nationality {
  native
  foreigner
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
  OUT_OF_ORDER
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum BillingType {
  NIGHT_STAY
  DAY_USE
  HOURLY
}

enum PaymentType {
  ADVANCE_PAYMENT
  CHECKOUT_PAYMENT
  REFUND
  PENALTY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum IncidentType {
  DAMAGE
  COMPLAINT
  MAINTENANCE_REQUEST
  SECURITY
  NOISE
  CLEANLINESS
  SERVICE
}

enum IncidentStatus {
  REPORTED
  INVESTIGATING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// ========== USER MANAGEMENT (Enhanced for Front Office) ==========
model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  password           String
  name               String
  role               Role     @default(CASHIER)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Enhanced user fields
  department         StaffDepartment?
  staffClass         StaffClass?
  fullName           String?
  nic                String?  @unique
  dateOfBirth        DateTime?
  contact            String?
  address            String?
  isDedicated        Boolean  @default(false)
  
  // Relations
  assetNotifications AssetNotification[]
  maintenanceLogs    MaintenanceLog[]
  assignedAssets     Asset[]
  reservations       Reservation[] @relation("StaffReservations")
  quickOrders        QuickOrder[]
  cashFlows          CashFlow[]
  payments           Payment[]
  reportedIncidents  IncidentLog[]
  assignedIncidents  IncidentLog[] @relation("AssignedIncidents")
  ordersTaken        RestaurantOrder[] @relation("OrderTakenBy")
  ordersServed       RestaurantOrder[] @relation("OrderServedBy")
  
  // HR Relations
  staff              Staff?
}

// ========== HR MODULE ==========

// Department (2.1)
model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  staff       Staff[]
}

// Staff Classes (2.2)
model StaffClassHR {
  id                  Int        @id @default(autoincrement())
  name                String     @unique
  salaryType          SalaryType
  baseSalary          Float
  maxLeavesPerMonth   Int        @default(2)
  maxLeavesPerYear    Int        @default(24)
  nightShiftRate      Float?     // Extra payment for night shifts
  overtimeRate        Float?
  isActive            Boolean    @default(true)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  
  staff               Staff[]
}

// Staff (Enhanced User model for HR - 2.3)
model Staff {
  id            Int           @id @default(autoincrement())
  userId        Int           @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  departmentId  Int
  department    Department    @relation(fields: [departmentId], references: [id])
  classId       Int
  staffClass    StaffClassHR  @relation(fields: [classId], references: [id])
  
  // Personal Details
  employeeId    String        @unique
  joinDate      DateTime
  probationEnd  DateTime?
  isActive      Boolean       @default(true)
  
  // Relations
  attendance    Attendance[]
  leaves        Leave[]
  shifts        ShiftAssignment[]
  privileges    StaffPrivilege[]
  documents     StaffDocument[]
  appraisals    Appraisal[]
  salaries      Salary[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Staff Privileges (2.11)
model StaffPrivilege {
  id          Int           @id @default(autoincrement())
  staffId     Int
  staff       Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)
  privilege   PrivilegeType
  canRead     Boolean       @default(true)
  canWrite    Boolean       @default(false)
  canDelete   Boolean       @default(false)
  grantedBy   Int
  grantedAt   DateTime      @default(now())
  
  @@unique([staffId, privilege])
}

// Attendance (2.4)
model Attendance {
  id          Int              @id @default(autoincrement())
  staffId     Int
  staff       Staff            @relation(fields: [staffId], references: [id], onDelete: Cascade)
  date        DateTime
  status      AttendanceStatus
  clockIn     DateTime?
  clockOut    DateTime?
  totalHours  Float?
  overtimeHours Float?
  leaveType   LeaveType?       // If status is LEAVE
  remarks     String?
  markedBy    Int?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@unique([staffId, date])
  @@index([date])
}

// Leave Management (2.4, 2.5)
model Leave {
  id            Int       @id @default(autoincrement())
  staffId       Int
  staff         Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  leaveType     LeaveType
  startDate     DateTime
  endDate       DateTime
  totalDays     Int
  reason        String
  status        String    @default("PENDING") // PENDING, APPROVED, REJECTED
  
  appliedAt     DateTime  @default(now())
  approvedBy    Int?
  approvedAt    DateTime?
  rejectionReason String?
  
  // Leave balance tracking
  balanceBefore Int
  balanceAfter  Int
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([staffId, startDate])
}

// Shift Management (2.6)
model Shift {
  id          Int      @id @default(autoincrement())
  name        String   // "Night Shift", "Morning Shift"
  startTime   String
  endTime     String
  isNightShift Boolean @default(false)
  extraRate   Float?   // Additional payment rate
  
  assignments ShiftAssignment[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ShiftAssignment {
  id        Int      @id @default(autoincrement())
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  shiftId   Int
  shift     Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  
  date      DateTime
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  
  @@unique([staffId, date])
  @@index([date])
}

// Payroll (2.7, 2.8)
model Salary {
  id              Int      @id @default(autoincrement())
  staffId         Int
  staff           Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  month           Int
  year            Int
  
  // Calculations
  baseSalary      Float
  overtimePay     Float    @default(0)
  nightShiftPay   Float    @default(0)
  allowances      Float    @default(0)
  deductions      Float    @default(0)
  advance         Float    @default(0)
  totalSalary     Float
  netSalary       Float
  
  // Working details
  workingDays     Int
  presentDays     Int
  leaveDays       Int
  overtimeHours   Float    @default(0)
  nightShiftHours Float    @default(0)
  
  status          String   @default("PENDING") // PENDING, PROCESSED, PAID
  processedAt     DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([staffId, month, year])
  @@index([month, year])
}

// Staff Documents (2.9)
model StaffDocument {
  id          Int      @id @default(autoincrement())
  staffId     Int
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  documentType String  // "CV", "Certificates", "ID Copy", "Contract"
  fileName    String
  filePath    String
  fileSize    Int?
  uploadedBy  Int
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([staffId, documentType])
}

// Appraisals (2.10)
model Appraisal {
  id              Int       @id @default(autoincrement())
  staffId         Int
  staff           Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  scheduledDate   DateTime
  completedDate   DateTime?
  
  // Ratings
  performance     Int?      // 1-5 scale
  punctuality     Int?
  teamwork        Int?
  communication   Int?
  overall         Int?
  
  // Feedback
  strengths       String?
  improvements    String?
  goals           String?
  managerNotes    String?
  
  // Status & Notifications
  status          String    @default("SCHEDULED") // SCHEDULED, COMPLETED, OVERDUE
  notificationSent Boolean  @default(false)
  reminderCount   Int       @default(0)
  
  conductedBy     Int?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([scheduledDate])
  @@index([status])
}

// ========== MODULE 03: CUSTOMER MANAGEMENT ==========
model Customer {
  id             Int          @id @default(autoincrement())
  customerID     String       @unique // Auto-generated customer ID
  isActive       Boolean      @default(true)
  
  // Personal Details
  title          String?      // Mr, Mrs, Ms, Dr
  firstName      String
  lastName       String?
  fullName       String?      // Computed field for display
  gender         String
  dateOfBirth    DateTime?
  anniversary    DateTime?
  nationality    Nationality
  
  // VIP Status (Module 03.2)
  isVip          Boolean      @default(false)
  vipLevel       String?      // Gold, Silver, Platinum
  
  // Contact Information
  occupation     String?
  email          String       @unique
  countryCode    String?
  phone          String       
  alternatePhone String?
  contactType    String?
  
  // Address
  country        String?
  state          String?
  city           String?
  zipcode        String?
  address        String
  
  // Identity Documents (NIC as per requirement 1.3, 1.4)
  identityType   String?      // NIC, Passport, Driver's License
  identityNumber String       @unique // This is the NIC for quick search
  frontIdUrl     String?      // Identity document front image
  backIdUrl      String?      // Identity document back image
  guestImageUrl  String?      // Customer photo
  
  // Additional Info
  specialRequests String?     // Dietary, accessibility needs
  notes          String?      // Staff notes about customer
  
  // Timestamps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  reservations   Reservation[]
  wakeUpCalls    WakeUpCall[]
  quickOrders    QuickOrder[] // Orders made while staying
  payments       Payment[]
  incidents      IncidentLog[]
  restaurantOrders RestaurantOrder[]
  
  @@index([identityNumber]) // Fast NIC search (requirement 1.4)
  @@index([isVip])          // VIP customer highlighting
  @@index([phone])          // Phone search
}

// ========== MODULE 06: ROOM SETTING ==========

// Room Classes/Types (6.1, 6.2)
model RoomClass {
  id                    Int      @id @default(autoincrement())
  name                  String   @unique // Deluxe, Super Luxury, Single
  description           String?
  
  // Pricing (6.2)
  ratePerNight          Float    // Night stay rate
  rateDayUse            Float    // Day use rate
  hourlyRate            Float?   // Hourly rate if applicable
  extraPersonCharge     Float    @default(0)
  childCharge           Float    @default(0)
  
  // Capacity
  maxOccupancy          Int      @default(2)
  standardOccupancy     Int      @default(2)
  
  // Room Details
  roomSize              String?  // Square footage or size category
  bedConfiguration      String?  // King, Queen, Twin, etc.
  
  // Cleaning Schedule (6.3 - Only Admin can modify)
  cleaningFrequencyDays Int      @default(1) // How often to clean
  lastCleaningUpdate    DateTime @default(now())
  cleaningDueNotification Boolean @default(true)
  
  // Features & Amenities
  amenities             String?  // JSON array of amenities
  specialFeatures       String?  // Balcony, Sea view, etc.
  
  // Status
  isActive              Boolean  @default(true)
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  rooms                 Room[]
  reservations          Reservation[]
  roomImages            RoomImage[]
  roomOffers            RoomOffer[] @relation("RoomOfferToRoomClass")
  complementaryItems    ComplementaryItem[]
}

// Individual Rooms
model Room {
  id              Int        @id @default(autoincrement())
  roomNumber      String     @unique // Room identifier (searchable as per 7.1)
  
  // Room Classification
  roomClassId     Int
  roomClass       RoomClass  @relation(fields: [roomClassId], references: [id], onDelete: Cascade)
  
  // Floor Information
  floorId         Int?
  floor           Floor?     @relation(fields: [floorId], references: [id], onDelete: SetNull)
  
  // Status
  status          RoomStatus @default(AVAILABLE)
  isActive        Boolean    @default(true)
  
  // Maintenance & Cleaning
  lastCleaned     DateTime?
  nextCleaningDue DateTime?
  cleaningNotes   String?
  
  // Special Features for this specific room
  hasBalcony      Boolean    @default(false)
  hasSeaView      Boolean    @default(false)
  hasKitchenette  Boolean    @default(false)
  specialNotes    String?
  
  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  reservations    Reservation[]
  facilities      RoomFacilityAssignment[]
  incidents       IncidentLog[]
  
  @@index([roomNumber]) // Fast room search (requirement 7.1)
  @@index([status])     // Filter by availability
}

// Room Facilities Management
model RoomFacility {
  id          Int      @id @default(autoincrement())
  name        String   @unique // WiFi, AC, TV, Mini Bar
  description String?
  category    String?  // Electronics, Furniture, Amenity
  isChargeable Boolean @default(false)
  chargeAmount Float   @default(0)
  
  assignments RoomFacilityAssignment[]
}

model RoomFacilityAssignment {
  id         Int          @id @default(autoincrement())
  roomId     Int
  facilityId Int
  room       Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  facility   RoomFacility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  isWorking  Boolean      @default(true)
  notes      String?
  
  @@unique([roomId, facilityId])
}

model RoomImage {
  id           Int       @id @default(autoincrement())
  roomClassId  Int
  roomClass    RoomClass @relation(fields: [roomClassId], references: [id], onDelete: Cascade)
  imageUrl     String
  caption      String?
  isPrimary    Boolean   @default(false)
  createdAt    DateTime  @default(now())
}

// ========== MODULE 07: ROOM RESERVATION ==========
model Reservation {
  id                 Int       @id @default(autoincrement())
  bookingNumber      String    @unique // Auto-generated booking reference
  
  // Customer Information (7.2)
  customerId         Int
  customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Room Information
  roomId             Int
  room               Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomClassId        Int
  roomClass          RoomClass @relation(fields: [roomClassId], references: [id], onDelete: Cascade)
  
  // Booking Dates & Times (7.2)
  checkInDate        DateTime
  checkOutDate       DateTime
  checkInTime        String    @default("14:00")
  checkOutTime       String    @default("12:00")
  actualCheckIn      DateTime?
  actualCheckOut     DateTime?
  
  // Guest Information
  numberOfNights     Int       // Calculated field
  adults             Int       @default(1)
  children           Int       @default(0)
  infants            Int       @default(0)
  
  // Booking Details
  bookingType        String?   // Online, Phone, Walk-in
  purposeOfVisit     String?   // Business, Leisure, Event
  arrivalFrom        String?   // Airport, City, etc.
  specialRequests    String?   // Late check-in, early check-out
  remarks            String?
  
  // Pricing (7.4 - Discount handling)
  billingType        BillingType @default(NIGHT_STAY)
  baseRoomRate       Float     // Original room rate per night
  totalRoomCharge    Float     // Base rate × nights
  extraCharges       Float     @default(0) // Additional services
  
  // Discount Management (7.4)
  discountType       DiscountType?
  discountValue      Float     @default(0) // Percentage or fixed amount
  discountReason     String?   // Reason for discount
  discountAmount     Float     @default(0) // Calculated discount amount
  discountApprovedBy String?   // Staff who approved discount
  
  // Additional Charges
  serviceCharge      Float     @default(0)
  tax                Float     @default(0)
  commissionPercent  Float     @default(0)
  commissionAmount   Float     @default(0)
  
  // Payment Information (7.2)
  paymentMethod      PaymentMethod
  totalAmount        Float     // Final amount after all calculations
  advanceAmount      Float     @default(0) // Paid advance
  balanceAmount      Float     @default(0) // Remaining balance
  
  // Payment Tracking
  paymentStatus      String    @default("PENDING") // PENDING, PARTIAL, PAID
  advanceRemarks     String?   // Notes about advance payment
  
  // Staff Information
  bookedBy           Int?      // Staff who made the booking
  bookedByStaff      User?     @relation("StaffReservations", fields: [bookedBy], references: [id], onDelete: SetNull)
  
  // Status Tracking
  reservationStatus  String    @default("CONFIRMED") // CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED
  cancellationReason String?
  cancellationDate   DateTime?
  
  // Timestamps
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  quickOrders        QuickOrder[] // Orders made during stay (requirement 1.5)
  complementaryItems ComplementaryItem[] @relation("ReservationToComplementary")
  payments           Payment[]
  incidents          IncidentLog[]
  
  @@index([checkInDate, checkOutDate]) // Date range searches
  @@index([reservationStatus])         // Status filtering
  @@index([bookingNumber])             // Booking search
}

// Quick Orders (Requirement 1.5)
model QuickOrder {
  id            Int         @id @default(autoincrement())
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  customerId    Int
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Order Details
  description   String      // What was ordered
  quantity      Int         @default(1)
  unitPrice     Float
  totalAmount   Float
  
  // Service Details
  serviceType   String?     // Room Service, Laundry, Extra Towels
  deliveredBy   Int?
  deliveredByStaff User?    @relation(fields: [deliveredBy], references: [id], onDelete: SetNull)
  
  // Status
  orderStatus   String      @default("PENDING") // PENDING, DELIVERED, CANCELLED
  deliveredAt   DateTime?
  notes         String?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Payment Management
model Payment {
  id            Int           @id @default(autoincrement())
  paymentId     String        @unique @default(cuid()) // Auto-generated payment ID
  
  // Related entities
  reservationId Int?
  reservation   Reservation?  @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  customerId    Int
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Payment details
  amount        Float
  paymentMethod PaymentMethod
  paymentType   PaymentType
  paymentStatus PaymentStatus @default(PENDING)
  
  // Transaction details
  transactionRef String?       // Bank reference, card transaction ID, etc.
  receiptNumber String?        // Internal receipt number
  
  // Additional info
  remarks       String?
  processedBy   Int?          // Staff who processed payment
  processedByStaff User?      @relation(fields: [processedBy], references: [id], onDelete: SetNull)
  
  // Timestamps
  paymentDate   DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([reservationId])
  @@index([paymentDate])
  @@index([paymentStatus])
}

// Incident/Damage Logging
model IncidentLog {
  id            Int           @id @default(autoincrement())
  incidentId    String        @unique @default(cuid())
  
  // Related entities
  reservationId Int?
  reservation   Reservation?  @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  roomId        Int?
  room          Room?         @relation(fields: [roomId], references: [id], onDelete: SetNull)
  customerId    Int?
  customer      Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  // Incident details
  incidentType  IncidentType
  title         String
  description   String
  severity      MaintenancePriority @default(MEDIUM)
  status        IncidentStatus @default(REPORTED)
  
  // Financial impact
  amount        Float         @default(0) // Damage cost, compensation, etc.
  isPaid        Boolean       @default(false)
  
  // Staff handling
  reportedBy    Int?          // Staff who reported
  reportedByStaff User?       @relation(fields: [reportedBy], references: [id], onDelete: SetNull)
  assignedTo    Int?          // Staff assigned to resolve
  assignedToStaff User?       @relation("AssignedIncidents", fields: [assignedTo], references: [id], onDelete: SetNull)
  
  // Resolution
  resolutionNotes String?
  resolvedAt    DateTime?
  
  // Evidence
  images        String?       // JSON array of image URLs
  documents     String?       // JSON array of document URLs
  
  // Timestamps
  incidentDate  DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([incidentType])
  @@index([status])
  @@index([incidentDate])
}

// Cash Flow Management (Requirement 1.6)
model CashFlow {
  id            Int      @id @default(autoincrement())
  staffId       Int
  staff         User     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  date          DateTime @default(now())
  transactionType String // INFLOW, OUTFLOW
  amount        Float
  paymentMethod PaymentMethod
  
  // Reference Information
  referenceType String?  // RESERVATION, QUICK_ORDER, REFUND, EXPENSE
  referenceId   Int?     // ID of related transaction
  
  remarks       String
  approvedBy    String?  // For large transactions
  
  createdAt     DateTime @default(now())
  
  @@index([date])          // Date-wise reports
  @@index([transactionType]) // Income/Expense filtering
}

// Complementary Items
model ComplementaryItem {
  id            Int           @id @default(autoincrement())
  roomClassId   Int
  roomClass     RoomClass     @relation(fields: [roomClassId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  rate          Float
  isOptional    Boolean       @default(true)
  
  reservations  Reservation[] @relation("ReservationToComplementary")
  
  @@unique([roomClassId, name])
}

// Room Offers and Promotions
model RoomOffer {
  id            Int       @id @default(autoincrement())
  roomClassId   Int
  roomClass     RoomClass @relation("RoomOfferToRoomClass", fields: [roomClassId], references: [id], onDelete: Cascade)
  
  title         String
  description   String?
  validFrom     DateTime
  validTo       DateTime
  
  discountType  DiscountType
  discountValue Float    // Percentage or amount
  
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([validFrom, validTo]) // Date range offers
}

// Floor Management (Supporting structure)
model Floor {
  id         Int    @id @default(autoincrement())
  name       String @unique // Ground Floor, 1st Floor, etc.
  floorNumber Int   @unique
  description String?
  
  rooms      Room[]
  
  createdAt  DateTime @default(now())
}

// Wake Up Call Service
model WakeUpCall {
  id            Int              @id @default(autoincrement())
  customerId    Int
  customer      Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerName  String
  customerPhone String
  roomNumber    String?
  date          DateTime
  time          String
  remarks       String?
  status        WakeUpCallStatus @default(Pending)
  createdAt     DateTime         @default(now())
}

// ========== ASSET MANAGEMENT ==========
model AssetCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  assetType   AssetType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assets      Asset[]
}

model Asset {
  id                    Int       @id @default(autoincrement())
  assetId               String    @unique
  name                  String
  code                  String    @unique
  description           String?
  
  type                  AssetType
  categoryId            Int?
  category              AssetCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  purchasePrice         Float
  purchaseDate          DateTime
  supplier              String?
  warrantyPeriod        Int?
  warrantyExpiry        DateTime?
  
  quantity              Int       @default(1)
  unit                  String?
  location              String?
  serialNumber          String?
  model                 String?
  brand                 String?
  
  status                AssetStatus @default(ACTIVE)
  condition             String?
  currentValue          Float?
  depreciationRate      Float?
  
  maintenanceDate       DateTime
  lastMaintenanceDate   DateTime?
  maintenanceInterval   Int       @default(365)
  maintenanceCost       Float     @default(0)
  
  assignedToId          Int?
  assignedTo            User?     @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  
  imageUrl              String?
  documentUrl           String?
  qrCode                String?
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  maintenanceLogs       MaintenanceLog[]
  notifications         AssetNotification[]
  transfers             AssetTransfer[]
  depreciations         AssetDepreciation[]
}

model MaintenanceLog {
  id                Int       @id @default(autoincrement())
  maintenanceId     String    @unique
  
  assetId           Int
  asset             Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  staffId           Int
  staff             User      @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  maintenanceDate   DateTime
  description       String
  cost              Float     @default(0)
  
  serviceProvider   String?
  serviceType       String?
  priority          MaintenancePriority @default(MEDIUM)
  
  status            MaintenanceStatus @default(COMPLETED)
  scheduledDate     DateTime?
  startTime         DateTime?
  endTime           DateTime?
  
  nextMaintenanceDate DateTime?
  
  partsUsed         String?
  partsCost         Float     @default(0)
  laborCost         Float     @default(0)
  
  inspectedBy       String?
  qualityRating     Int?
  
  beforeImages      String?
  afterImages       String?
  workOrderNumber   String?
  
  remarks           String?
  issuesFound       String?
  recommendations   String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model AssetNotification {
  id              Int       @id @default(autoincrement())
  notificationId  String    @unique
  
  assetId         Int
  asset           Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  userId          Int?
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  type            String
  title           String
  message         String
  priority        MaintenancePriority @default(MEDIUM)
  
  isRead          Boolean   @default(false)
  isActionTaken   Boolean   @default(false)
  
  scheduledFor    DateTime
  sentAt          DateTime?
  acknowledgedAt  DateTime?
  
  escalationLevel Int       @default(0)
  escalatedTo     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model AssetTransfer {
  id            Int      @id @default(autoincrement())
  transferId    String   @unique
  
  assetId       Int
  asset         Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  fromLocation  String
  toLocation    String
  fromUserId    Int?
  toUserId      Int?
  
  reason        String
  transferDate  DateTime
  approvedBy    String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AssetDepreciation {
  id              Int      @id @default(autoincrement())
  assetId         Int
  asset           Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  year            Int
  openingValue    Float
  depreciationAmount Float
  closingValue    Float
  method          String
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([assetId, year])
}

// ========== RESTAURANT MODULE ==========

// Restaurant Categories
model RestaurantCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  
  // Relations
  products    RestaurantProduct[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Restaurant Products/Menu Items
model RestaurantProduct {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  
  // Category
  categoryId  Int
  category    RestaurantCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Pricing
  price       Float
  cost        Float    @default(0) // Cost price for profit calculation
  
  // Inventory
  isAvailable Boolean  @default(true)
  stockQuantity Int    @default(0)
  lowStockAlert Int    @default(5)
  
  // Product details
  preparationTime Int  @default(15) // Minutes
  calories       Int?
  isVegetarian   Boolean @default(false)
  isVegan        Boolean @default(false)
  allergens      String? // JSON array of allergens
  
  // Status
  isActive    Boolean  @default(true)
  
  // Relations
  orderItems  RestaurantOrderItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([categoryId])
  @@index([isAvailable, isActive])
}

// Restaurant Tables
model RestaurantTable {
  id          Int      @id @default(autoincrement())
  tableNumber String   @unique
  capacity    Int      @default(4)
  location    String?  // Section, Floor, etc.
  
  // Status
  status      String   @default("AVAILABLE") // AVAILABLE, OCCUPIED, RESERVED, OUT_OF_ORDER
  isActive    Boolean  @default(true)
  
  // Current occupancy
  currentGuests Int    @default(0)
  
  // Relations
  orders      RestaurantOrder[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
}

// Restaurant Orders
model RestaurantOrder {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique @default(cuid())
  
  // Table assignment
  tableId     Int?
  table       RestaurantTable? @relation(fields: [tableId], references: [id], onDelete: SetNull)
  tableNumber String?  // For takeaway/delivery orders
  
  // Customer info (optional for walk-in)
  customerId  Int?
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerName String?
  customerPhone String?
  
  // Order details
  orderType   String   @default("DINE_IN") // DINE_IN, TAKEAWAY, DELIVERY
  status      String   @default("PENDING") // PENDING, PREPARING, READY, SERVED, COMPLETED, CANCELLED
  
  // Pricing
  subtotal    Float    @default(0)
  tax         Float    @default(0)
  discount    Float    @default(0)
  total       Float    @default(0)
  
  // Payment
  paymentMethod PaymentMethod?
  paymentStatus String @default("PENDING") // PENDING, PAID, PARTIAL
  paidAmount    Float  @default(0)
  
  // Kitchen info
  kotGenerated Boolean @default(false)
  kotGeneratedAt DateTime?
  estimatedTime Int?   // Minutes
  
  // Special instructions
  notes       String?
  specialRequests String?
  
  // Staff
  waiterName  String?  // Name of the waiter serving the table
  takenBy     Int?     // Staff who took the order
  takenByStaff User?   @relation("OrderTakenBy", fields: [takenBy], references: [id], onDelete: SetNull)
  servedBy    Int?     // Staff who served the order
  servedByStaff User?  @relation("OrderServedBy", fields: [servedBy], references: [id], onDelete: SetNull)
  
  // Timestamps
  orderTime   DateTime @default(now())
  readyTime   DateTime?
  completedTime DateTime?
  
  // Relations
  items       RestaurantOrderItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([orderTime])
  @@index([tableId])
}

// Restaurant Order Items
model RestaurantOrderItem {
  id        Int      @id @default(autoincrement())
  
  // Order relation
  orderId   Int
  order     RestaurantOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Product relation
  productId Int
  product   RestaurantProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Item details
  quantity  Int      @default(1)
  unitPrice Float    // Price at time of order
  total     Float    // quantity * unitPrice
  
  // Customizations
  notes     String?  // Special instructions for this item
  
  // Kitchen status
  status    String   @default("PENDING") // PENDING, PREPARING, READY, SERVED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orderId])
  @@index([productId])
}